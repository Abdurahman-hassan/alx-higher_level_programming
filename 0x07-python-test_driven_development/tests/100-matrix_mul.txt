============================
The ``100-matrix_mul`` module
============================

---------------------
Using ``matrix_mul``
---------------------

Import matrix_mul function from the module:
    >>> matrix_mul = __import__('100-matrix_mul').matrix_mul


. add two matrices
    >>> matrix_mul([[1, 2], [3, 4]], [[1, 2], [3, 4]])
    [[7, 10], [15, 22]]

. add none
    >>> matrix_mul([[1, 2], [3, 4]], None)
    Traceback (most recent call last):
        ...
    TypeError: m_b must be a list

. add a list of lists
    >>> matrix_mul([[1, 2], [3, 4]], [[1, 2], [3, 4], [5, 6]])
    Traceback (most recent call last):
        ...
    ValueError: m_a and m_b can't be multiplied

. add a list of lists
    >>> matrix_mul([[1, 2], [3, 4]], [[1, 2], [3, 4, 5]])
    Traceback (most recent call last):
        ...
    TypeError: each row of m_b must be of the same size

.multiply normal matrices of size 2x2 * 2x2:
    >>> matrix_mul([[1, 2], [3, 4]], [[1, 2], [3, 4]])
    [[7, 10], [15, 22]]

.multiply normal matrices of size 3x2 * 2x2:
    >>> matrix_mul([[1, 2], [3, 4], [5, 6]], [[1, 2], [3, 4]])
    [[7, 10], [15, 22], [23, 34]]

.multiply normal matrices of size 1x1 * 1x1:
    >>> matrix_mul([[5]], [[5]])
    [[25]]

.multiply normal matrices of float and negative numbers of size 3x2 * 2x2:
    >>> matrix_mul([[1, -2.4], [3.0, 4], [5.9, -6]], [[1, 2.6], [3.234, 4]])
    [[-6.7616, -7.0], [15.936, 23.8], [-13.504, -8.659999999999998]]

.invalid multiplication for tuples:
    >>> matrix_mul((2, 43, 8), (6, 1, 7))
    Traceback (most recent call last):
        ...
    TypeError: m_a must be a list

.invalid multiplication for lists:
    >>> matrix_mul([2, 43, 8], [6, 1, 7])
    Traceback (most recent call last):
        ...
    TypeError: m_a must be a list of lists

.invalid multiplication for list of lists of non-numeric values:
    >>> matrix_mul([[1, "2"], ["ab", 4], ["5", 6]], [[1, 2], [3, 4]])
    Traceback (most recent call last):
        ...
    TypeError: m_a should contain only integers or floats

.invalid multiplication for not rectangular lists:
    >>> matrix_mul([[1, 2], [3, 4], [5, 6]], [[1, 2], [3, 4, 5]])
    Traceback (most recent call last):
        ...
    TypeError: each row of m_b must be of the same size

.invalid multiplication for Empty lists:
    >>> matrix_mul([[]], [])
    Traceback (most recent call last):
        ...
    ValueError: m_a can't be empty

.invalid multiplication for one empty list and the other is normal:
    >>> matrix_mul([[1, 2], [3, 4], [5, 6]], [[]])
    Traceback (most recent call last):
        ...
    ValueError: m_b can't be empty

.invalid multiplication for one empty list inside first argument:
    >>> matrix_mul([[1, 2], [], [5, 6]], [[1, 2], [3, 4]])
    Traceback (most recent call last):
        ...
    TypeError: each row of m_a must be of the same size

.Try invalid multiplication for matrices of size 3x2 * 1x3:
    >>> matrix_mul([[1, 2], [3, 4], [5, 6]], [[1, 2, 3]])
    Traceback (most recent call last):
        ...
    ValueError: m_a and m_b can't be multiplied

.Run a test in which no parameters are provided:
    >>> matrix_mul()
    Traceback (most recent call last):
        ...
    TypeError: matrix_mul() missing 2 required positional arguments: 'm_a' and 'm_b'

.provide more parameters than expected:
    >>> matrix_mul([[1, 2], [3, 4]], [[1, 2], [3, 4,]], [[1, 2], [3, 4]])
    Traceback (most recent call last):
        ...
    TypeError: matrix_mul() takes 2 positional arguments but 3 were given

.provide None as a parameter:
    >>> matrix_mul(None)
    Traceback (most recent call last):
        ...
    TypeError: matrix_mul() missing 1 required positional argument: 'm_b'

.provide None in all parameter:
    >>> matrix_mul(None, None)
    Traceback (most recent call last):
        ...
    TypeError: m_a must be a list

.Matrix with a Single Row and a Single Column:
    >>> matrix_mul([[1]], [[1]])
    [[1]]

.Matrix with Zero Elements:
    >>> matrix_mul([[0]], [[0]])
    [[0]]

.Multiplying Matrices of Different Sizes (e.g., 2x3 and 3x2):
    >>> matrix_mul([[1, 2, 3], [4, 5, 6]], [[1, 2], [3, 4], [5, 6]])
    [[22, 28], [49, 64]]

.Matrix with Invalid String Elements:
    >>> matrix_mul([["a", "b"], ["c", "d"]], [["e", "f"], ["g", "h"]])
    Traceback (most recent call last):
        ...
    TypeError: m_a should contain only integers or floats

.Multiplying a Matrix with a Non-Matrix Object (e.g., List of Integers):
    >>> matrix_mul([[1, 2], [3, 4]], [1, 2])
    Traceback (most recent call last):
        ...
    TypeError: m_b must be a list of lists

.Multiplying by a Matrix with One Element Missing:
    >>> matrix_mul([[1, 2], [3, 4]], [[1, 2], [3]])
    Traceback (most recent call last):
        ...
    TypeError: each row of m_b must be of the same size

.Matrix with Nested Empty Lists:
    >>> matrix_mul([[]], [[]])
    Traceback (most recent call last):
        ...
    ValueError: m_a can't be empty

.Matrix with One Row:
    >>> matrix_mul([[1, 2, 3]], [[4], [5], [6]])
    [[32]]

.Matrix with Non-Numeric Data Types:
    >>> matrix_mul([[1, 2, 3], [4, 5, 6]], [["a", "b", "c"], ["d", "e", "f"]])
    Traceback (most recent call last):
        ...
    TypeError: m_b should contain only integers or floats

.Matrix Multiplication with a List and a Tuple:
    >>> matrix_mul([[1, 2], [3, 4]], [(1, 2), (3, 4)])
    Traceback (most recent call last):
        ...
    TypeError: m_b must be a list of lists

./Matrix with One Element as None:
    >>> matrix_mul([[1, 2], [3, 4]], [[1, 2], [3, None]])
    Traceback (most recent call last):
        ...
    TypeError: m_b should contain only integers or floats