===================================
The ``5-text_indentation`` module
===================================

----------------------------
Using ``text_indentation``
----------------------------

Import text_indentation function from the module:
    >>> text_indentation = __import__('5-text_indentation').text_indentation


. Test 1: text_indentation function with a string
    >>> text_indentation("""Lorem ipsum dolor sit amet, consectetur adipiscing elit. Quonam modo? Utrum igitur tibi litteram videor an totas paginas commovere? Non autem hoc: igitur ne illud quidem. Fortasse id optimum, sed ubi illud: Plus semper voluptatis? Teneo, inquit, finem illi videri nihil dolere. Transfer idem ad modestiam vel temperantiam, quae est moderatio cupiditatum rationi oboediens. Si id dicis, vicimus. Inde sermone vario sex illa a Dipylo stadia confecimus. Sin aliud quid voles, postea. Quae animi affectio suum cuique tribuens atque hanc, quam dico. Utinam quidem dicerent alium alio beatiorem! Iam ruinas videres.""")
    Lorem ipsum dolor sit amet, consectetur adipiscing elit.
    <BLANKLINE>
    Quonam modo?
    <BLANKLINE>
    Utrum igitur tibi litteram videor an totas paginas commovere?
    <BLANKLINE>
    Non autem hoc:
    <BLANKLINE>
    igitur ne illud quidem.
    <BLANKLINE>
    Fortasse id optimum, sed ubi illud:
    <BLANKLINE>
    Plus semper voluptatis?
    <BLANKLINE>
    Teneo, inquit, finem illi videri nihil dolere.
    <BLANKLINE>
    Transfer idem ad modestiam vel temperantiam, quae est moderatio cupiditatum rationi oboediens.
    <BLANKLINE>
    Si id dicis, vicimus.
    <BLANKLINE>
    Inde sermone vario sex illa a Dipylo stadia confecimus.
    <BLANKLINE>
    Sin aliud quid voles, postea.
    <BLANKLINE>
    Quae animi affectio suum cuique tribuens atque hanc, quam dico.
    <BLANKLINE>
    Utinam quidem dicerent alium alio beatiorem! Iam ruinas videres.
    <BLANKLINE>


. Add None test
    >>> text_indentation(None)
    Traceback (most recent call last):
        ...
    TypeError: text must be a string

. Add int test
    >>> text_indentation(1)
    Traceback (most recent call last):
        ...
    TypeError: text must be a string

. Add float test
    >>> text_indentation(1.5)
    Traceback (most recent call last):
        ...
    TypeError: text must be a string

. Add list test
    >>> text_indentation([1, 2, 3])
    Traceback (most recent call last):
        ...
    TypeError: text must be a string

. Add tuple test
    >>> text_indentation((1, 2, 3))
    Traceback (most recent call last):
        ...
    TypeError: text must be a string

. Add dict test
    >>> text_indentation({'a': 1, 'b': 2, 'c': 3})
    Traceback (most recent call last):
        ...
    TypeError: text must be a string

. Add set test
    >>> text_indentation({1, 2, 3})
    Traceback (most recent call last):
        ...
    TypeError: text must be a string

. Add bool test
    >>> text_indentation(True)
    Traceback (most recent call last):
        ...
    TypeError: text must be a string

. Add empty string test
    >>> text_indentation("")


. Add string with only spaces test
    >>> text_indentation("   ")


. Add string with only tabs test
    >>> text_indentation("        ")


. Add string with only newlines test
    >>> text_indentation("\n\n\n")
    <BLANKLINE>
    <BLANKLINE>
    <BLANKLINE>

. Add string with only spaces, tabs and newlines test
    >>> text_indentation("   \n\n\n        ")
    <BLANKLINE>
    <BLANKLINE>
    <BLANKLINE>


. Try a text with delims and new lines:
    >>> text_indentation("\n.\n?\n:\n")
    <BLANKLINE>
    .
    <BLANKLINE>
    <BLANKLINE>
    ?
    <BLANKLINE>
    <BLANKLINE>
    :
    <BLANKLINE>
    <BLANKLINE>

. Try a sentence with spaces and a delim:
    >>> text_indentation("Hello    .")
    Hello.
    <BLANKLINE>

. Try a sentence with delims only:
    >>> text_indentation(".?:")
    .
    <BLANKLINE>
    ?
    <BLANKLINE>
    :
    <BLANKLINE>

. Try a sentence with spaces around:
    >>> text_indentation("    Hello    ")
    Hello