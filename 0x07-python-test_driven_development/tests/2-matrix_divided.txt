======================
The ``2-matrix_divided`` module
======================

-------------------
Using ``matrix_divided``
-------------------

Import matrix_divided function from the module:
    >>> matrix_divided = __import__('2-matrix_divided').matrix_divided

. Test the function with a 2x2 matrix:
    >>> matrix = [[1, 2], [3, 4]]
    >>> matrix_divided(matrix, 2)
    [[0.5, 1.0], [1.5, 2.0]]

. Test the function with a 3x3 matrix:
    >>> matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
    >>> matrix_divided(matrix, 3)
    [[0.33, 0.67, 1.0], [1.33, 1.67, 2.0], [2.33, 2.67, 3.0]]

. Test in normal conditions:
    >>> matrix = [[1, 2, 3], [4, 5, 6]]
    >>> matrix_divided(matrix, 3)
    [[0.33, 0.67, 1.0], [1.33, 1.67, 2.0]]

. Test with a float number:
    >>> matrix = [[1, 2, 3], [4, 5, 6]]
    >>> matrix_divided(matrix, 3.5)
    [[0.29, 0.57, 0.86], [1.14, 1.43, 1.71]]

. Test with an invalid matrix:
    >>> matrix = [[1, 2, 3], [4, 5, 6, 7]]
    >>> matrix_divided(matrix, 3)
    Traceback (most recent call last):
        ...
    TypeError: Each row of the matrix must have the same size

. Test with a zero division:
    >>> matrix = [[1, 2, 3], [4, 5, 6]]
    >>> matrix_divided(matrix, 0)
    Traceback (most recent call last):
        ...
    ZeroDivisionError: division by zero

. Test with a string:
    >>> matrix = [[1, 2, 3], [4, 5, 6]]
    >>> matrix_divided(matrix, 'a')
    Traceback (most recent call last):
        ...
    TypeError: div must be a number

. Test with a list:
    >>> matrix = [[1, 2, 3], [4, 5, 6]]
    >>> matrix_divided(matrix, [1, 2, 3])
    Traceback (most recent call last):
        ...
    TypeError: div must be a number

. Test with a tuple:
    >>> matrix = [[1, 2, 3], [4, 5, 6]]
    >>> matrix_divided(matrix, (1, 2, 3))
    Traceback (most recent call last):
        ...
    TypeError: div must be a number

. Test with a dictionary:
    >>> matrix = [[1, 2, 3], [4, 5, 6]]
    >>> matrix_divided(matrix, {1, 2, 3})
    Traceback (most recent call last):
        ...
    TypeError: div must be a number

. Test with a boolean:
    >>> matrix = [[1, 2, 3], [4, 5, 6]]
    >>> matrix_divided(matrix, True)
    [[1.0, 2.0, 3.0], [4.0, 5.0, 6.0]]

. Test with a boolean:
    >>> matrix = [[1, 2, 3], [4, 5, 6]]
    >>> matrix_divided(matrix, False)
    Traceback (most recent call last):
        ...
    ZeroDivisionError: division by zero


. Test with one argument:
    >>> matrix = [[1, 2, 3], [4, 5, 6]]
    >>> matrix_divided(matrix)
    Traceback (most recent call last):
        ...
    TypeError: matrix_divided() missing 1 required positional argument: 'div'

. Test with no arguments:
    >>> matrix = [[1, 2, 3], [4, 5, 6]]
    >>> matrix_divided()
    Traceback (most recent call last):
        ...
    TypeError: matrix_divided() missing 2 required positional arguments: 'matrix' and 'div'

. Test with more than two arguments:
    >>> matrix = [[1, 2, 3], [4, 5, 6]]
    >>> matrix_divided(1, 2, 3)
    Traceback (most recent call last):
        ...
    TypeError: matrix_divided() takes 2 positional arguments but 3 were given

. Test with a number insted of a matrix (list of lists) of integers/floats:
    >>> matrix = [[1, 2, 3], [4, 5, 6]]
    >>> matrix_divided(1, 2)
    Traceback (most recent call last):
        ...
    TypeError: matrix must be a matrix (list of lists) of integers/floats

. Test with a matrix (list) of integers/floats:
    >>> matrix = [[1, 2, 3], [4, 5, 6]]
    >>> matrix_divided([1, 2, 3], 2)
    Traceback (most recent call last):
        ...
    TypeError: matrix must be a matrix (list of lists) of integers/floats

. Test with a matrix (tuple) of integers/floats:
    >>> matrix = [[1, 2, 3], [4, 5, 6]]
    >>> matrix_divided((1, 2, 3), 2)
    Traceback (most recent call last):
        ...
    TypeError: matrix must be a matrix (list of lists) of integers/floats

. Test with a matrix (dictionary) of integers/floats:
    >>> matrix = [[1, 2, 3], [4, 5, 6]]
    >>> matrix_divided({1, 2, 3}, 2)
    Traceback (most recent call last):
        ...
    TypeError: matrix must be a matrix (list of lists) of integers/floats

. Test with a matrix (boolean) of integers/floats:
    >>> matrix = [[1, 2, 3], [4, 5, 6]]
    >>> matrix_divided(True, 2)
    Traceback (most recent call last):
        ...
    TypeError: matrix must be a matrix (list of lists) of integers/floats

. Test with a matrix (string) of integers/floats:
    >>> matrix = [[1, 2, 3], [4, 5, 6]]
    >>> matrix_divided('a', 2)
    Traceback (most recent call last):
        ...
    TypeError: matrix must be a matrix (list of lists) of integers/floats

. Test with a matrix (list) of integers/floats:
    >>> matrix = [[1, 2, 3], [4, 5, 6]]
    >>> matrix_divided([[1, 2, 3], [4, 5, 6]], 2)
    [[0.5, 1.0, 1.5], [2.0, 2.5, 3.0]]

. Test div by None:
    >>> matrix = [[1, 2, 3], [4, 5, 6]]
    >>> matrix_divided(matrix, None)
    Traceback (most recent call last):
        ...
    TypeError: div must be a number


. Test divied by Nan:
    >>> matrix = [[1, 2, 3], [4, 5, 6]]
    >>> matrix_divided(matrix, float('nan'))
    [[nan, nan, nan], [nan, nan, nan]]

. Test divied by Inf:
    >>> matrix = [[1, 2, 3], [4, 5, 6]]
    >>> matrix_divided(matrix, float('inf'))
    [[0.0, 0.0, 0.0], [0.0, 0.0, 0.0]]

. Test divied by -Inf:
    >>> matrix = [[1, 2, 3], [4, 5, 6]]
    >>> matrix_divided(matrix, float('-inf'))
    [[-0.0, -0.0, -0.0], [-0.0, -0.0, -0.0]]


. Test divied by 0.0:
    >>> matrix = [[1, 2, 3], [4, 5, 6]]
    >>> matrix_divided(matrix, 0.0)
    Traceback (most recent call last):
        ...
    ZeroDivisionError: division by zero

. parameters are more than expected
    >>> matrix = [[1, 2, 3], [4, 5, 6]]
    >>> matrix_divided(matrix, 2, 3)
    Traceback (most recent call last):
        ...
    TypeError: matrix_divided() takes 2 positional arguments but 3 were given

. no parameters
    >>> matrix = [[1, 2, 3], [4, 5, 6]]
    >>> matrix_divided()
    Traceback (most recent call last):
        ...
    TypeError: matrix_divided() missing 2 required positional arguments: 'matrix' and 'div'

. no list
    >>> matrix = [[1, 2, 3], [4, 5, 6]]
    >>> matrix_divided(1)
    Traceback (most recent call last):
        ...
    TypeError: matrix_divided() missing 1 required positional argument: 'div'

. matrix only
    >>> matrix = [[1, 2, 3], [4, 5, 6]]
    >>> matrix_divided(matrix)
    Traceback (most recent call last):
        ...
    TypeError: matrix_divided() missing 1 required positional argument: 'div'

. list with empty list
    >>> matrix = [[1, 2, 3], [4, 5, 6]]
    >>> matrix_divided([[], []], 2)
    Traceback (most recent call last):
        ...
    TypeError: matrix must be a matrix (list of lists) of integers/floats

. negative float
    >>> matrix = [[1, 2, 3], [4, 5, 6]]
    >>> matrix_divided(matrix, -2.0)
    [[-0.5, -1.0, -1.5], [-2.0, -2.5, -3.0]]

. negative int
    >>> matrix = [[1, 2, 3], [4, 5, 6]]
    >>> matrix_divided(matrix, -2)
    [[-0.5, -1.0, -1.5], [-2.0, -2.5, -3.0]]

. positive float
    >>> matrix = [[1, 2, 3], [4, 5, 6]]
    >>> matrix_divided(matrix, 2.0)
    [[0.5, 1.0, 1.5], [2.0, 2.5, 3.0]]

. positive int

    >>> matrix = [[1, 2, 3], [4, 5, 6]]
    >>> matrix_divided(matrix, 2)
    [[0.5, 1.0, 1.5], [2.0, 2.5, 3.0]]

. matrix contains a string
    >>> matrix = [[1, 2, 3], [4, 5, 6]]
    >>> matrix_divided([[1, 2, 3], [4, 5, 'a']], 2)
    Traceback (most recent call last):
        ...
    TypeError: matrix must be a matrix (list of lists) of integers/floats