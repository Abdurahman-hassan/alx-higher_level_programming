=============================
The ``7-base_geometry`` module
=============================

-----------------------------
Using ``BaseGeometry``
-----------------------------

This module provides a class ``BaseGeometry`` that inherits from ``list``.
. import BaseGeometry
    >>> BaseGeometry = __import__('7-base_geometry').BaseGeometry
    >>> bg = BaseGeometry()

.simple test
    >>> bg.integer_validator("my_int", 12)
    >>> bg.integer_validator("width", 89)
    >>> bg.integer_validator("height", 1)
    >>> bg.integer_validator("x", 10)
    >>> bg.integer_validator("y", 1)

    >>> bg.area()
    Traceback (most recent call last):
        ...
    Exception: area() is not implemented

.call area method:
    >>> bg.area()
    Traceback (most recent call last):
        ...
    Exception: area() is not implemented

.call area method with more arguments than expected:
    >>> bg.area(98)
    Traceback (most recent call last):
        ...
    TypeError: area() takes 1 positional argument but 2 were given

.add normal number:
    >>> bg.integer_validator("my_int", 12)

.pass string to the second argument:
    >>> bg.integer_validator("name", "John")
    Traceback (most recent call last):
        ...
    TypeError: name must be an integer

.pass zero to the second argument:
    >>> bg.integer_validator("name", 0)
    Traceback (most recent call last):
        ...
    ValueError: name must be greater than 0

.pass negative number to the second argument:
    >>> bg.integer_validator("name", -4)
    Traceback (most recent call last):
        ...
    ValueError: name must be greater than 0

.pass float number to the second argument:
    >>> bg.integer_validator("name", 2.4)
    Traceback (most recent call last):
        ...
    TypeError: name must be an integer

.pass list to the second argument:
    >>> bg.integer_validator("name", [98])
    Traceback (most recent call last):
        ...
    TypeError: name must be an integer

.pass tuple to the second argument:
    >>> bg.integer_validator("name", (98, 1))
    Traceback (most recent call last):
        ...
    TypeError: name must be an integer

.pass dictionary to the second argument:
    >>> bg.integer_validator("name", {"num", 98})
    Traceback (most recent call last):
        ...
    TypeError: name must be an integer

.pass boolean value to the second argument:
    >>> bg.integer_validator("name", True)

.pass None to the second argument:
    >>> bg.integer_validator("name", None)
    Traceback (most recent call last):
        ...
    TypeError: name must be an integer

.pass None as argument:
    >>> bg.integer_validator(None)
    Traceback (most recent call last):
        ...
    TypeError: integer_validator() missing 1 required positional argument: 'value'

.pass empty arguments:
    >>> bg.integer_validator()
    Traceback (most recent call last):
        ...
    TypeError: integer_validator() missing 2 required positional arguments: 'name' and 'value'

.add one missing argument:
    >>> bg.integer_validator("name")
    Traceback (most recent call last):
        ...
    TypeError: integer_validator() missing 1 required positional argument: 'value'

.add too many arguments:
    >>> bg.integer_validator("name", 2, 1)
    Traceback (most recent call last):
        ...
    TypeError: integer_validator() takes 3 positional arguments but 4 were given