=============================
The ``1-my_list`` module
=============================

-----------------------------
Using ``MyList``
-----------------------------

This module provides a class ``MyList`` that inherits from ``list``.
. import MyList
    >>> MyList = __import__('1-my_list').MyList
    >>> my_list = MyList()

. basic use of my_list
    >>> my_list = MyList()
    >>> my_list.append(1)
    >>> my_list
    [1]

. use extend
    >>> my_list.extend([2, 3, 4])
    >>> my_list
    [1, 2, 3, 4]

. use append
    >>> my_list.append([5, 6, 7])
    >>> my_list
    [1, 2, 3, 4, [5, 6, 7]]

. use extend
    >>> my_list.extend([8, 9, 10])
    >>> my_list
    [1, 2, 3, 4, [5, 6, 7], 8, 9, 10]

. use insert
    >>> my_list.insert(0, 0)
    >>> my_list
    [0, 1, 2, 3, 4, [5, 6, 7], 8, 9, 10]

. use insert
    >>> my_list.insert(10, 11)
    >>> my_list
    [0, 1, 2, 3, 4, [5, 6, 7], 8, 9, 10, 11]

. use insert
    >>> my_list.insert(100, 100)
    >>> my_list
    [0, 1, 2, 3, 4, [5, 6, 7], 8, 9, 10, 11, 100]

. use pop
    >>> my_list.pop()
    100

    >>> my_list
    [0, 1, 2, 3, 4, [5, 6, 7], 8, 9, 10, 11]

    >>> my_list.pop(0)
    0

>>> my_list
[1, 2, 3, 4, [5, 6, 7], 8, 9, 10, 11]

. use reverse
    >>> my_list.reverse()
    >>> my_list
    [11, 10, 9, 8, [5, 6, 7], 4, 3, 2, 1]

. use remove
    >>> my_list.remove(8)
    >>> my_list
    [11, 10, 9, [5, 6, 7], 4, 3, 2, 1]

    >>> my_list
    [11, 10, 9, [5, 6, 7], 4, 3, 2, 1]

.test empty list
    >>> my_list = MyList()
    >>> my_list
    []

.test single element
    >>> my_list = MyList([1])
    >>> my_list
    [1]

.test multiple elements
    >>> my_list = MyList([1, 2, 3, 4])
    >>> my_list
    [1, 2, 3, 4]

.test single element with another way
    >>> my_list = MyList()
    >>> my_list.append(1)
    >>> my_list
    [1]

.test negative index
    >>> my_list = MyList([1, 2, 3, 4])
    >>> my_list[-1]
    4


. Check to see if it's derived from the list class.

    >>> issubclass(MyList, list)
    True

. Check to see if it's not derived from the list class

    >>> issubclass(MyList, tuple)
    False

. Check to see if it's not derived from the list class

    >>> issubclass(MyList, dict)
    False

. Check to see if it's not derived from the list class

    >>> issubclass(MyList, str)
    False

. Try to add elements to the list ant print them.

    >>> my_list.append(1)
    >>> my_list.append(4)
    >>> my_list.append(2)
    >>> my_list.append(3)
    >>> my_list.append(5)
    >>> my_list
    [1, 2, 3, 4, 1, 4, 2, 3, 5]

. Try to print the list sorted.

    >>> my_list.print_sorted()
    [1, 1, 2, 2, 3, 3, 4, 4, 5]

. Test that the list isn't ordered.
    >>> print(my_list)
    [1, 2, 3, 4, 1, 4, 2, 3, 5]

. Test empty list.
    >>> empty_list = MyList()
    >>> empty_list.print_sorted()
    []

. Test single element.
    >>> single_element_list = MyList()
    >>> single_element_list.append(23)
    >>> single_element_list.print_sorted()
    [23]

. Test duplicated numbers.
    >>> duplicated_list = MyList()
    >>> duplicated_list.append(9)
    >>> duplicated_list.append(3)
    >>> duplicated_list.append(2)
    >>> duplicated_list.append(3)
    >>> duplicated_list.append(-1)
    >>> duplicated_list.print_sorted()
    [-1, 2, 3, 3, 9]

. Test negative numbers.
    >>> negative_list = MyList()
    >>> negative_list.append(-3)
    >>> negative_list.append(0)
    >>> negative_list.append(-2)
    >>> negative_list.append(-87)
    >>> negative_list.print_sorted()
    [-87, -3, -2, 0]
